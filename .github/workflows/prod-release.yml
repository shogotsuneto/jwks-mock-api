name: Production Release Pipeline

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.3)'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Build and Release Production Artifacts
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Verify Go installation
      run: go version
      
    - name: Run validation
      run: |
        go mod verify
        go vet ./...
        
    - name: Validate and extract version info
      id: version
      run: |
        VERSION="${{ github.event.inputs.version }}"
        
        # Validate version format (should be vX.Y.Z or X.Y.Z)
        if [[ ! "$VERSION" =~ ^v?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "❌ Invalid version format: $VERSION"
          echo "Version must be in format vX.Y.Z or X.Y.Z (e.g., v1.2.3 or 1.2.3)"
          exit 1
        fi
        
        # Ensure version starts with 'v'
        if [[ ! "$VERSION" =~ ^v ]]; then
          VERSION="v${VERSION}"
        fi
        
        # Check if tag already exists
        if git rev-parse --verify "refs/tags/${VERSION}" >/dev/null 2>&1; then
          echo "❌ Tag ${VERSION} already exists"
          echo "Please choose a different version number"
          exit 1
        fi
        
        echo "✅ Version validation passed: $VERSION"
        
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "version_clean=${VERSION#v}" >> $GITHUB_OUTPUT
        echo "commit_sha=$(echo ${{ github.sha }} | cut -c1-8)" >> $GITHUB_OUTPUT
        echo "build_date=$(date -u '+%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
        
    - name: Create and push tag
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a ${{ steps.version.outputs.version }} -m "Release ${{ steps.version.outputs.version }}"
        git push origin ${{ steps.version.outputs.version }}
        
    - name: Build multi-platform binaries
      run: |
        mkdir -p dist
        
        # Build for Linux AMD64
        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
          -ldflags='-w -s -extldflags "-static"' \
          -o dist/jwks-mock-api-${{ steps.version.outputs.version }}-linux-amd64 \
          ./cmd/jwks-mock-api
          
        # Build for Linux ARM64
        CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build \
          -ldflags='-w -s -extldflags "-static"' \
          -o dist/jwks-mock-api-${{ steps.version.outputs.version }}-linux-arm64 \
          ./cmd/jwks-mock-api
          
        # Build for macOS AMD64
        CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build \
          -ldflags='-w -s' \
          -o dist/jwks-mock-api-${{ steps.version.outputs.version }}-darwin-amd64 \
          ./cmd/jwks-mock-api
          
        # Build for macOS ARM64 (Apple Silicon)
        CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build \
          -ldflags='-w -s' \
          -o dist/jwks-mock-api-${{ steps.version.outputs.version }}-darwin-arm64 \
          ./cmd/jwks-mock-api
          
        # Build for Windows AMD64
        CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build \
          -ldflags='-w -s' \
          -o dist/jwks-mock-api-${{ steps.version.outputs.version }}-windows-amd64.exe \
          ./cmd/jwks-mock-api
          
    - name: Verify binaries
      run: |
        echo "Built binaries:"
        ls -lh dist/
        for binary in dist/*; do
          echo "Checking $binary:"
          file "$binary"
        done
        
    - name: Create checksums
      run: |
        cd dist
        sha256sum * > checksums.txt
        cat checksums.txt
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=tag
          type=raw,value=latest
          type=raw,value=${{ steps.version.outputs.version_clean }}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Generate release notes
      id: release_notes
      run: |
        cat > release_notes.md << EOF
        ## 🚀 Release ${{ steps.version.outputs.version }}
        
        ### 📦 Artifacts
        
        #### Binaries
        Download the appropriate binary for your platform:
        - **Linux AMD64**: \`jwks-mock-api-${{ steps.version.outputs.version }}-linux-amd64\`
        - **Linux ARM64**: \`jwks-mock-api-${{ steps.version.outputs.version }}-linux-arm64\`
        - **macOS AMD64**: \`jwks-mock-api-${{ steps.version.outputs.version }}-darwin-amd64\`
        - **macOS ARM64** (Apple Silicon): \`jwks-mock-api-${{ steps.version.outputs.version }}-darwin-arm64\`
        - **Windows AMD64**: \`jwks-mock-api-${{ steps.version.outputs.version }}-windows-amd64.exe\`
        
        #### Container Images
        Pull the Docker image:
        \`\`\`bash
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version_clean }}
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        \`\`\`
        
        ### 🔐 Verification
        
        All binaries are provided with SHA256 checksums in \`checksums.txt\`. Verify the integrity of your download:
        
        \`\`\`bash
        sha256sum jwks-mock-api-${{ steps.version.outputs.version }}-<platform>
        \`\`\`
        
        ### 📋 Usage
        
        Quick start:
        \`\`\`bash
        # Using binary
        ./jwks-mock-api-${{ steps.version.outputs.version }}-<platform>
        
        # Using Docker
        docker run -p 3000:3000 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version_clean }}
        \`\`\`
        
        For detailed usage instructions, see the [README](https://github.com/${{ env.IMAGE_NAME }}/blob/${{ steps.version.outputs.version }}/README.md).
        
        ---
        
        **Built on**: ${{ steps.version.outputs.build_date }}  
        **Commit**: ${{ steps.version.outputs.commit_sha }}
        EOF
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Release ${{ steps.version.outputs.version }}
        body_path: release_notes.md
        files: |
          dist/*
        draft: true
        prerelease: false
        
    - name: Output summary
      run: |
        echo "## 🎉 Production Release ${{ steps.version.outputs.version }} Published!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** \`${{ steps.version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** \`${{ steps.version.outputs.commit_sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Build Date:** \`${{ steps.version.outputs.build_date }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Published Artifacts:" >> $GITHUB_STEP_SUMMARY
        echo "- **GitHub Release**: [Release ${{ steps.version.outputs.version }}](https://github.com/${{ env.IMAGE_NAME }}/releases/tag/${{ steps.version.outputs.version }})" >> $GITHUB_STEP_SUMMARY
        echo "- **Binaries**: Multi-platform binaries (Linux, macOS, Windows) for AMD64 and ARM64" >> $GITHUB_STEP_SUMMARY
        echo "- **Container Images**:" >> $GITHUB_STEP_SUMMARY
        echo "  - \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY
        echo "  - \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version_clean }}\`" >> $GITHUB_STEP_SUMMARY
        echo "  - \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 Quick Start:" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "# Pull and run the container" >> $GITHUB_STEP_SUMMARY
        echo "docker run -p 3000:3000 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version_clean }}" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY